{"version":3,"sources":["CSVReader.js","utils.js","App.js","index.js"],"names":["CSVReaderComponent","handleOnDrop","data","props","handler","handleOnError","err","file","inputElem","reason","console","log","handleOnRemoveFile","removeHeaders","chunk","rows","split","splice","join","onDrop","this","onError","addRemoveButton","onRemoveFile","config","header","beforeFirstChunk","accept","Component","sortByName","a","b","localeCompare","App","useState","tribal","setTribal","geographic","setGeographic","programs","setPrograms","noContact","setNoContact","noURL","setNoURL","noCounty","setNoCounty","changed","setChanged","added","setAdded","removed","setRemoved","className","results","forEach","item","itemCopy","type","val","state","county","counties","push","contact","program","startsWith","getContactInfo","sort","processPrograms","map","generateJSON","pro","concat","updates","prev","current","changedRecords","addedRecords","removedRecords","foundRecords","match","some","prevItem","Object","keys","key","length","name","includes","diff","index","prop","i","url","onClick","navigator","clipboard","writeText","JSON","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6f0e5ac0.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nimport { CSVReader } from 'react-papaparse'\n\nexport default class CSVReaderComponent extends Component {\n  handleOnDrop = (data) => {\n    this.props.handler(data);\n  }\n\n  handleOnError = (err, file, inputElem, reason) => {\n    console.log(err)\n  }\n\n  handleOnRemoveFile = (data) => {\n    this.props.handler([])\n  }\n\n  removeHeaders = (chunk) => {\n    var rows = chunk.split( /\\r\\n|\\r|\\n/ );\n    rows.splice(0, 3);\n    return rows.join(\"\\r\\n\");\n  }\n\n  render() {\n    return (\n      <CSVReader\n        onDrop={this.handleOnDrop}\n        onError={this.handleOnError}\n        addRemoveButton\n        onRemoveFile={this.handleOnRemoveFile}\n        config={{header:true, beforeFirstChunk: this.removeHeaders}}\n        accept='text/csv, .csv, .tsv, application/vnd.ms-excel'>\n        <span>Drop CSV file here or click to upload.</span>\n      </CSVReader>\n    )\n  }\n}","import counties from './county-map.json';\n\nexport const generateJSON = data => {\n  return data.map( item => {\n    return item['data']\n  })\n}\n\nexport const getContactInfo = ( val, program ) => {\n  if ( val ) {\n    if ( val.startsWith( 'http' ) ){\n      return ['url', val];\n    } else if ( val.startsWith( 'www' ) ) {\n      return ['url', 'http://' + val ];\n    } else {\n      return ['phone', val];\n    }\n  }\n}\n\nconst sortByName = ( a, b ) => {\n  return a['name'].localeCompare( b['name'] );\n}\n\nexport const processPrograms = programs => {\n  let geographic = [];\n  let tribal = [];\n  let results = [];\n  let noContact = [];\n  let noURL = [];\n  let noCounty = [];\n  programs.forEach( item => {\n    let itemCopy = {};\n    // Copy and rename values\n    // Copy Geographic Level as Type\n    let type = item['Geographic Level'];\n    itemCopy['type'] = type;\n\n    // Copy State as State\n    itemCopy['state'] = item['State'];\n    // Set State to territory name if territory\n    if ( type === 'Territory' ) {\n      let val = item['Tribal Government/ Territory'];\n      if ( val === 'Commonwealth of the Northern Mariana Islands' ) {\n        // Rename Mariana Islands to match state name\n        itemCopy['state'] = 'Northern Mariana Islands';\n      } else {\n        itemCopy['state'] = val;\n      }\n    }\n    // copy Program Name as Program\n    itemCopy['program'] = item['Program Name'];\n    // Set Name based on type\n    itemCopy['name'] = item['City/County/ Locality'] ||\n                       item['Tribal Government/ Territory'] ||\n                       item['State'];\n    // Add County if type === 'City'\n    if ( type === 'City' ) {\n      const state = item['State'];\n      let stateObj = counties[state] || {};\n      let county = stateObj[item['City/County/ Locality']]\n      itemCopy['county'] = county;\n      if (!county) {\n        noCounty.push( `${item['City/County/ Locality']}, ${item['State']}`)\n      }\n    }\n    // check to see whether contact info is URL or phone\n    // and set Phone or URL property\n    let contact = getContactInfo(\n      item['Program Page Link  (Phone # if Link is Unavailable)']\n    )\n    if (contact) {\n      itemCopy[contact[0]] = contact[1];\n      if ( contact[0] === 'phone' ) {\n        noURL.push( [item['Program Name'], contact[1]] )\n      }\n    } else {\n      noContact.push(item['Program Name']);\n    }\n    if ( type === 'Tribal Government' ) {\n      tribal.push(itemCopy)\n    } else {\n      geographic.push(itemCopy)\n    }\n    tribal.sort(sortByName)\n  })\n\n  console.log(tribal)\n  return {\n    geographic: geographic,\n    tribal: tribal,\n    noContact: noContact,\n    noCounty: noCounty,\n    noURL: noURL\n  }\n}\n\nexport const diff = ( prev, current ) => {\n  console.log(prev)\n  console.log(current)\n  let changedRecords = [];\n  let addedRecords = [];\n  let removedRecords = [];\n  let foundRecords = [];\n  current.forEach( item => {\n    let match = false;\n    let changed = [];\n    prev.some( prevItem => {\n      if ( item.program === prevItem.program  && item.state === prevItem.state) {\n        match = true;\n        Object.keys( item ).forEach( key => {\n          if (key !== 'county') {\n            if ( item[key] !== prevItem[key] ) {\n              changed.push([key, prevItem[key], item[key]])\n            }\n          }\n        })\n        return match\n      }\n      return false;\n    })\n    if ( match ) {\n      foundRecords.push( item.program );\n      if ( Object.keys(changed).length ) {\n        changedRecords.push([item.name + ', ' + item.state + ': ' + changed[0][2], changed])\n      }\n    } else {\n      addedRecords.push(item)\n    }\n  })\n  console.log(foundRecords)\n  prev.forEach( item => {\n    if ( !foundRecords.includes(item.program )) {\n      removedRecords.push(item)\n    }\n  })\n  console.log('removed', removedRecords)\n  console.log('added', addedRecords)\n  return {\n    added: addedRecords, \n    removed: removedRecords,\n    changed: changedRecords\n  }\n}\n\n\n\n\n\n\n","import './App.css';\nimport { useState } from 'react';\nimport CSVReaderComponent from './CSVReader.js';\nimport { diff, generateJSON, processPrograms } from './utils.js';\nimport prev from './latest.json';\n\n\n// Processing involves:\n// - removing first three rows of headers from tsv\n// - converting tsv to json\n// - mapping to new json objects, copying only needed values:\n//     - \"Geographic Level\" => \"Type\"\n// .   - \"State\" or \"Tribal Government/ Territory\" => \"State\"\n//       - Mariana Islands renamed to match state value in state select\n//     - \"Program Name\" => \"Program\"\n//     - \"City/County/ Locality\" or \n//       \"Tribal Government/ Territory\" or\n//       \"State\" => \"Name\"\n//     - Add \"County\" using county map if City\n//     - \"Program Page Link  (Phone # if Link is Unavailable)\" =>\n//       \"URL\" or \"Phone\" depending on value\n\n\n\nfunction App() {\n  const [ tribal, setTribal ] = useState( [] );\n  const [ geographic, setGeographic ] = useState( [] );\n  const [ programs, setPrograms ] = useState( [] );\n  const [ noContact, setNoContact ]= useState( [] );\n  const [ noURL, setNoURL ]= useState( [] );\n  const [ noCounty, setNoCounty ]= useState( [] );\n  const [ changed, setChanged ] = useState( [] );\n  const [ added, setAdded ] = useState( [] );\n  const [ removed, setRemoved ] = useState( [] );\n\n  const csvToJSON = data => {\n    console.log(data)\n    let importedJSON = generateJSON( data );\n    const results = processPrograms( importedJSON );\n    setGeographic( results.geographic )\n    setTribal( results.tribal )\n\n    let pro = results.geographic.concat(results.tribal)\n    setPrograms(pro)\n\n    console.log(\"PRO\", pro)\n    setNoContact( results.noContact );\n    setNoURL( results.noURL );\n    setNoCounty( results.noCounty );\n    let updates = diff( prev, pro )\n    setChanged(updates.changed)\n    setRemoved(updates.removed)\n    setAdded(updates.added)\n  }\n\n  const copy = () => {\n    navigator.clipboard.writeText( JSON.stringify({\"geographic\": geographic, \"tribal\": tribal}) )\n  }\n\n\n  const copyFull = () => {\n    navigator.clipboard.writeText( JSON.stringify(programs) )\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"reader block u-mt15\">\n        <CSVReaderComponent handler={ csvToJSON }/>\n      </div>\n      { geographic.length > 0 &&\n      <div>\n        <h1>Programs</h1>\n        { ( noContact.length > 0 || noURL.length > 0 || noCounty.length > 0 ) &&\n          <h2>Issues</h2>\n        }\n        { noContact.length > 0 &&\n          <div className=\"block block__sub\">\n            <h3>No contact info</h3>\n            <ul>\n            { noContact.map( ( item, index ) => (\n              <li key={index}>{item}</li>\n            ) ) } \n            </ul>\n          </div>\n        }\n        { noURL.length > 0 &&\n          <div className=\"block block__sub\">\n            <h3>No URL</h3>\n            <ul>\n            { noURL.map( ( item, index ) => (\n              <li key={index}>{item[0]}: {item[1]}</li>\n            ) ) } \n            </ul>\n          </div>\n        }\n        { noCounty.length > 0 &&\n          <div className=\"block block__sub\">\n            <h3>Cities not in county list</h3>\n            <ul>\n            { noCounty.map( ( item, index ) => (\n              <li  key={index}>{item}</li>\n            ) ) } \n            </ul>\n          </div>\n        }\n        <h2>Changed: {changed.length}</h2>\n{/*         <ul> */}\n{/*         {changed.map(( item, index) => ( */}\n{/*           <li>  - { item[0] } </li> */}\n{/*         ))} */}\n{/* </ul> */}\n        {changed.map(( item, index) => (\n            <div className=\"block block__sub\" key={index}>\n                <table className=\"changedTable\">\n                    <thead>\n                      <tr>\n                        <th>{item[0]}</th>\n                        <th>Before</th>\n                        <th>After</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {item[1].map(( prop, i ) => (\n                        \n                            <tr>\n                              <td>\n                                {prop[0]}\n                              </td>\n                              <td>\n                                <span>{prop[1]}</span>\n                              </td>\n                              <td>\n                                <span>{prop[2]}</span>\n                              </td>\n                            </tr>\n                        \n                        \n                      ))}\n                  </tbody>\n                  </table>\n            </div>\n        ))}\n\n        <div className=\"block\" >\n          <h2>Added: {added.length}</h2>\n          <ul>\n          {added.map(( item, index) => (\n              <li key={index}>{item.name}</li>\n          ))}\n          </ul>\n        </div>\n\n        <div className=\"block\" >\n          <h2>Removed: {removed.length}</h2>\n          <ul>\n          {removed.map(( item, index) => (\n              <li key={index}>{item.name}</li>\n          ))}\n          </ul>\n        </div>\n\n        <div className=\"block\">\n          <h2> There are {geographic.length} geographic programs</h2>\n          <table>\n            <thead>\n              <tr>\n                <th>State</th>\n                <th>Type</th>\n                <th>Name</th>\n                <th>Program</th>\n                <th>URL</th>\n                <th>Phone</th>\n                <th>County</th>\n              </tr>\n            </thead>\n            <tbody>\n          { geographic.map( ( item, index ) => (\n              <tr key={index}>\n                <td>{ item.state }</td>\n                <td>{ item.type }</td>\n                <td>{ item.name }</td>\n                <td>{ item.program }</td>\n                <td className=\"url\">{ item.url }</td>\n                <td>{ item[\"Phone\"] }</td>\n                <td>\n                  <ul>\n                    { item.county && item.county.map( ( county, index ) => (\n                      <li  key={ index }>{ county }</li>\n                    ) ) } \n                    </ul>\n                </td>\n              </tr>\n            ) ) } \n          </tbody>\n          </table>\n        </div>\n        <div className=\"block\">\n          <h2> There are {tribal.length} tribal programs</h2>\n          <table>\n            <thead>\n              <tr>\n                <th>State</th>\n                <th>Type</th>\n                <th>Name</th>\n                <th>Program</th>\n                <th>URL</th>\n                <th>Phone</th>\n                <th>County</th>\n              </tr>\n            </thead>\n            <tbody>\n          { tribal.map( ( item, index ) => (\n              <tr key={index}>\n                <td>{ item.state }</td>\n                <td>{ item.type }</td>\n                <td>{ item.name }</td>\n                <td>{ item.program }</td>\n                <td className=\"url\">{ item.url }</td>\n                <td>{ item[\"Phone\"] }</td>\n                <td>\n                  <ul>\n                    { item.county && item.county.map( ( county, index ) => (\n                      <li  key={ index }>{ county }</li>\n                    ) ) } \n                    </ul>\n                </td>\n              </tr>\n            ) ) } \n          </tbody>\n          </table>\n        </div>\n        <h2>JSON</h2>\n        <button className=\"a-btn u-mb15\" onClick={ copy }>Copy JSON</button>\n        {/* <div className=\"json\"> */}\n        {/*   { JSON.stringify({\"geographic\": geographic, \"tribal\": tribal}) } */}\n        {/* </div> */}\n        <button className=\"a-btn u-mb15\" onClick={ copyFull }>Copy ALL JSON</button>\n\n      </div>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}