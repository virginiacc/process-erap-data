{"version":3,"sources":["CSVReader.js","App.js","utils.js","index.js"],"names":["CSVReaderComponent","handleOnDrop","data","props","handler","handleOnError","err","file","inputElem","reason","console","log","handleOnRemoveFile","removeHeaders","chunk","rows","split","splice","join","onDrop","this","onError","addRemoveButton","onRemoveFile","config","header","beforeFirstChunk","accept","Component","App","useState","programs","setPrograms","noContact","setNoContact","noURL","setNoURL","noCounty","setNoCounty","className","results","forEach","item","itemCopy","type","val","state","county","counties","push","contact","program","startsWith","getContactInfo","processPrograms","map","generateJSON","length","index","onClick","navigator","clipboard","writeText","JSON","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fa1b1206.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nimport { CSVReader } from 'react-papaparse'\n\nexport default class CSVReaderComponent extends Component {\n  handleOnDrop = (data) => {\n    this.props.handler(data);\n  }\n\n  handleOnError = (err, file, inputElem, reason) => {\n    console.log(err)\n  }\n\n  handleOnRemoveFile = (data) => {\n    this.props.handler([])\n  }\n\n  removeHeaders = (chunk) => {\n    var rows = chunk.split( /\\r\\n|\\r|\\n/ );\n    rows.splice(0, 3);\n    return rows.join(\"\\r\\n\");\n  }\n\n  render() {\n    return (\n      <CSVReader\n        onDrop={this.handleOnDrop}\n        onError={this.handleOnError}\n        addRemoveButton\n        onRemoveFile={this.handleOnRemoveFile}\n        config={{header:true, beforeFirstChunk: this.removeHeaders}}\n        accept='text/csv, .csv, .tsv, application/vnd.ms-excel'>\n        <span>Drop CSV file here or click to upload.</span>\n      </CSVReader>\n    )\n  }\n}","import './App.css';\nimport { useState } from 'react';\nimport CSVReaderComponent from './CSVReader.js';\nimport { generateJSON, processPrograms } from './utils.js';\n\n// Processing involves:\n// - removing first three rows of headers from tsv\n// - converting tsv to json\n// - mapping to new json objects, copying only needed values:\n//     - \"Geographic Level\" => \"Type\"\n// .   - \"State\" or \"Tribal Government/ Territory\" => \"State\"\n//       - Mariana Islands renamed to match state value in state select\n//     - \"Program Name\" => \"Program\"\n//     - \"City/County/ Locality\" or \n//       \"Tribal Government/ Territory\" or\n//       \"State\" => \"Name\"\n//     - Add \"County\" using county map if City\n//     - \"Program Page Link  (Phone # if Link is Unavailable)\" =>\n//       \"URL\" or \"Phone\" depending on value\n\n\n\nfunction App() {\n  const [ programs, setPrograms ] = useState( [] );\n  const [ noContact, setNoContact ]= useState( [] );\n  const [ noURL, setNoURL ]= useState( [] );\n  const [ noCounty, setNoCounty ]= useState( [] );\n\n  const csvToJSON = data => {\n    const json = generateJSON( data );\n    const results = processPrograms( json );\n    setPrograms( results.programs )\n    setNoContact( results.noContact );\n    setNoURL( results.noURL );\n    setNoCounty( results.noCounty );\n  }\n\n  const copy = () => {\n    navigator.clipboard.writeText( JSON.stringify(programs) )\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"reader block u-mt15\">\n        <CSVReaderComponent handler={ csvToJSON }/>\n      </div>\n      { programs.length > 0 &&\n      <div>\n        <h1>Programs</h1>\n        { ( noContact.length > 0 || noURL.length > 0 || noCounty.length > 0 ) &&\n          <h2>Issues</h2>\n        }\n        { noContact.length > 0 &&\n          <div className=\"block block__sub\">\n            <h3>No contact info</h3>\n            <ul>\n            { noContact.map( ( item, index ) => (\n              <li key={index}>{item}</li>\n            ) ) } \n            </ul>\n          </div>\n        }\n        { noURL.length > 0 &&\n          <div className=\"block block__sub\">\n            <h3>No URL</h3>\n            <ul>\n            { noURL.map( ( item, index ) => (\n              <li key={index}>{item[0]}: {item[1]}</li>\n            ) ) } \n            </ul>\n          </div>\n        }\n        { noCounty.length > 0 &&\n          <div className=\"block block__sub\">\n            <h3>Cities not in county list</h3>\n            <ul>\n            { noCounty.map( ( item, index ) => (\n              <li  key={index}>{item}</li>\n            ) ) } \n            </ul>\n          </div>\n        }\n        \n        <div className=\"block\">\n          <h2> There are {programs.length} programs</h2>\n          <table>\n            <thead>\n              <tr>\n                <th>State</th>\n                <th>Type</th>\n                <th>Name</th>\n                <th>Program</th>\n                <th>URL</th>\n                <th>Phone</th>\n                <th>County</th>\n              </tr>\n            </thead>\n            <tbody>\n          { programs.map( ( item, index ) => (\n              <tr key={index}>\n                <td>{ item[\"State\"] }</td>\n                <td>{ item[\"Type\"] }</td>\n                <td>{ item[\"Name\"] }</td>\n                <td>{ item[\"Program\"] }</td>\n                <td className=\"url\">{ item[\"URL\"] }</td>\n                <td>{ item[\"Phone\"] }</td>\n                <td>\n                  <ul>\n                    { item[\"County\"] && item[\"County\"].map( ( county, index ) => (\n                      <li  key={ index }>{ county }</li>\n                    ) ) } \n                    </ul>\n                </td>\n              </tr>\n            ) ) } \n          </tbody>\n          </table>\n        </div>\n        <h2>JSON</h2>\n        <button className=\"a-btn u-mb15\" onClick={ copy }>Copy</button>\n        <div className=\"json\">\n          { JSON.stringify(programs) }\n        </div>\n      </div>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","import counties from './county-map.json';\n\nexport const generateJSON = data => {\n  return data.map( item => {\n    return item['data']\n  })\n}\n\nexport const getContactInfo = ( val, program ) => {\n  if ( val ) {\n    if ( val.startsWith( 'http' ) ){\n      return ['URL', val];\n    } else if ( val.startsWith( 'www' ) ) {\n      return ['URL', 'http://' + val ];\n    } else {\n      return ['Phone', val];\n    }\n  }\n}\n\nexport const processPrograms = programs => {\n  let results = [];\n  let noContact = [];\n  let noURL = [];\n  let noCounty = [];\n  programs.forEach( item => {\n    let itemCopy = {};\n    // Copy and rename values\n    // Copy Geographic Level as Type\n    let type = item['Geographic Level'];\n    itemCopy['Type'] = type;\n    // Copy State as State\n    itemCopy['State'] = item['State'];\n    // Set State to territory name if territory\n    if ( type === 'Territory' ) {\n      let val = item['Tribal Government/ Territory'];\n      if ( val === 'Commonwealth of the Northern Mariana Islands' ) {\n        // Rename Mariana Islands to match state name\n        itemCopy['State'] = 'Northern Mariana Islands';\n      } else {\n        itemCopy['State'] = val;\n      }\n    }\n    // copy Program Name as Program\n    itemCopy['Program'] = item['Program Name'];\n    // Set Name based on type\n    itemCopy['Name'] = item['City/County/ Locality'] ||\n                       item['Tribal Government/ Territory'] ||\n                       item['State'];\n    // Add County if type === 'City'\n    if ( type === 'City' ) {\n      const state = item['State'];\n      let stateObj = counties[state] || {};\n      let county = stateObj[item['City/County/ Locality']]\n      itemCopy['County'] = county;\n      if (!county) {\n        noCounty.push( `${item['City/County/ Locality']}, ${item['State']}`)\n      }\n    }\n    // check to see whether contact info is URL or phone\n    // and set Phone or URL property\n    let contact = getContactInfo(\n      item['Program Page Link  (Phone # if Link is Unavailable)']\n    )\n    if (contact) {\n      itemCopy[contact[0]] = contact[1];\n      if ( contact[0] === 'Phone' ) {\n        noURL.push( [item['Program Name'], contact[1]] )\n      }\n    } else {\n      noContact.push(item['Program Name']);\n    }\n    results.push(itemCopy)\n  })\n  return {\n    programs: results,\n    noContact: noContact,\n    noCounty: noCounty,\n    noURL: noURL\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}